#pragma checksum "C:\Users\Rockster_Laptop\Desktop\Tesis\Tesis\Pages\Inventory\InventoryMain.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "fc353743be2a17ebd2f441f32b21d92547c6b85c"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(Tesis.Pages.Inventory.Pages_Inventory_InventoryMain), @"mvc.1.0.razor-page", @"/Pages/Inventory/InventoryMain.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.RazorPageAttribute(@"/Pages/Inventory/InventoryMain.cshtml", typeof(Tesis.Pages.Inventory.Pages_Inventory_InventoryMain), null)]
namespace Tesis.Pages.Inventory
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\Rockster_Laptop\Desktop\Tesis\Tesis\Pages\_ViewImports.cshtml"
using Tesis;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"fc353743be2a17ebd2f441f32b21d92547c6b85c", @"/Pages/Inventory/InventoryMain.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"c9b8230867da10110ca3d56b2c2fbb3a8e440d01", @"/Pages/_ViewImports.cshtml")]
    public class Pages_Inventory_InventoryMain : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 2 "C:\Users\Rockster_Laptop\Desktop\Tesis\Tesis\Pages\Inventory\InventoryMain.cshtml"
  
    ViewData["Title"] = "Inventory";

#line default
#line hidden
            BeginContext(52, 10091, true);
            WriteLiteral(@"
<div class=""container"">
    <h1>Movimiento de inventario</h1>

    <br />

    <div class=""form-row"">

        <div class=""form-group col-md-5"">
            <p>Lupita sin br</p>
            <input id=""SearchBar""
                   oninput=""SearchProduct(this.value)""
                   class=""form-control mr-sm-2""
                   type=""search""
                   placeholder=""Buscar""
                   aria-label=""Search"">
        </div>

        <div class=""form-group col-md-2"">
            <button class=""btn btn-danger my-2 my-sm-0""> Inventario en 0 </button>

            <button type=""button"" onclick=""SaveStock()"" class=""btn btn-primary pull-right""> Guardar </button>

            <div class=""custom-control custom-radio"">
                <input type=""radio"" id=""AddStockRadioBtn"" name=""AddOrDeleteStockRadioBtn"" class=""custom-control-input"" checked="""">
                <label class=""custom-control-label"" for=""AddStockRadioBtn""> Añadir </label>
            </div>
            <div cl");
            WriteLiteral(@"ass=""custom-control custom-radio"">
                <input type=""radio"" id=""DeleteStockRadioBtn"" name=""AddOrDeleteStockRadioBtn"" class=""custom-control-input"">
                <label class=""custom-control-label"" for=""DeleteStockRadioBtn""> Eliminar </label>
            </div>

        </div>

    </div>

    <div class=""form-row"">

        <div class=""form-group col-md-6"">
            <h4>Inventario</h4>
            <ul id=""SearchProducts"" class=""list-group"">
                <li class=""list-group-item""> Ninguna busqueda realizada </li>
            </ul>
        </div>
        <div class=""form-group col-md-6"">
            <h4>Productos en movimiento</h4>
            <ul id=""EditProducts"" class=""list-group"">
                <li class=""list-group-item""> No se ha añadido ningún producto </li>
            </ul>
        </div>
    </div>
</div>



<div class=""modal"" tabindex=""-1"" role=""dialog"">
    <div class=""modal-dialog"" role=""document"">
        <div class=""modal-content"">
           ");
            WriteLiteral(@" <div class=""modal-header"">
                <h5 class=""modal-title"">Modal title</h5>
                <button type=""button"" class=""close"" data-dismiss=""modal"" aria-label=""Close"">
                    <span aria-hidden=""true"">&times;</span>
                </button>
            </div>l
            <div class=""modal-body"">
                <p>Modal body text goes here.</p>
            </div>
            <div class=""modal-footer"">
                <button type=""button"" class=""btn btn-primary"">Aceptar</button>
                <button type=""button"" class=""btn btn-secondary"" data-dismiss=""modal"">Cancelar</button>
            </div>
        </div>
    </div>
</div>

<script>

    // Global variables
    var SearchApprovedBool = true;
    var SearchProductsList = [];
    var EditProductsList = [];

    function SaveStock() {

        // Update stock values
        for (var i = 0; i < EditProductsList.length; i++) {
            // Create a variable to save the product id of the edit products
 ");
            WriteLiteral(@"           var NewProductStockId = ""#ProductStock"" + i;

            // Update the stock value of teh edit products by the user input
            EditProductsList[i].ProductStock = $(NewProductStockId).val();
        }

        // Save the selection of add or delete
        if ($(DeleteStockRadioBtn).is(':checked')) {
            var AddOrDeleteRadioBtn = ""Delete"";
        } else {
            var AddOrDeleteRadioBtn = ""Add"";
        }

        // Make the AJAX request to save modifications in products of stock
        $.ajax({
            type: ""POST"",
            url: ""/Inventory/SaveStock"",
            data: {
                // Send the selection of add or delete
                AddOrDeleteString: AddOrDeleteRadioBtn,

                // Send products to modify in JSON
                EditProductsListJSON: JSON.stringify(EditProductsList)
            },
            // If the request is successfull
            success: function (response) {

                //console.log(response");
            WriteLiteral(@");

                EditProductsList = Array.from(JSON.parse(response));

                console.log(EditProductsList);

                // Update the Lists
                UpdateLists();
            }
        })
    }

    // Gets called to search by the search bar
    function SearchProduct(SearchWord) {

        // If search is approved by time
        if (SearchApprovedBool) {

            // Clear Search Products List
            $(SearchProducts).empty();

            // If the search bar has content
            if (SearchWord.length > 0) {
                $(""<li class=\""list-group-item\""> Cargando... </li>"").appendTo(SearchProducts);

                // Make the AJAX request to search products
                $.ajax({
                    type: ""GET"",
                    url: ""/Products/SearchProduct"",
                    dataType: ""json"",
                    data: {
                        SearchString: SearchWord
                    },
                    contentType:");
            WriteLiteral(@" 'application/json; charset=utf-8',
                    // If the request is successfull
                    success: function (Response) {

                        // Set the products to the global variable
                        SearchProductsList = Array.from(JSON.parse(Response));

                        // Update Lists HTML
                        UpdateLists();

                        // Check if any product was found
                        if (SearchProductsList.length == 0) {
                            // Clear Search Products List
                            $(SearchProducts).empty();

                            // No product returned by the server
                            $(""<li class=\""list-group-item\""> Ningun producto coincide con la busqueda </li>"").appendTo(SearchProducts);
                        }
                    }
                });
            } else {
                // Clear Search Products List
                $(SearchProducts).empty();

            ");
            WriteLiteral(@"    // Show the user haven't search anything
                $(""<li class=\""list-group-item\""> Ninguna busqueda realizada </li>"").appendTo(SearchProducts);
            }

            // Deny search
            SearchApproved();
        }
    }

    function AddProductToEditInventory(ProductIndex) {

        // Add the product to the list of editing products
        EditProductsList.push(SearchProductsList[ProductIndex]);

        // Remove the product from the list of searched products
        SearchProductsList.splice(ProductIndex, 1);

        // Update Lists
        SearchProduct($(SearchBar).val());
    }

    function RemoveProductFromEditInventory(ProductIndex) {
        // Remove the product from the list of editing products
        EditProductsList.splice(ProductIndex, 1);

         // Update Lists
        SearchProduct($(SearchBar).val());
    }

    // Update Lists
    function UpdateLists() {

        // Clear Search Products List
        $(SearchProducts).empty();");
            WriteLiteral(@"

        // Fill the list with the products returned by the server
        for (var i = 0; i < SearchProductsList.length; i++) {
            // If the Product is not being edit yet
            if (!EditProductsContains(SearchProductsList[i])) {
                $(""<li id=\""SearchProduct"" + i + ""\"" class=\""p-2 list-group-item\"">"" +
                    ""<div class=\""d-flex justify-content-between\"">"" +
                    ""<p class=\""col-4 my-auto\"">"" + SearchProductsList[i].ProductName + ""</p>"" +
                    ""<p class=\""col-2 my-auto\"">"" + SearchProductsList[i].ProductStock + ""</p>"" +
                    ""<button type=\""button\"" onclick=\""AddProductToEditInventory("" + i + "")\"" class=\""btn btn-sm btn-outline-success\""> > </button>"" +
                    ""</div > "" +
                    ""</li>"").appendTo(SearchProducts);
            }
        }

        // Clear Edit Products List HTML
        $(EditProducts).empty();

        // Update Edit Products List
        if (EditProductsList.l");
            WriteLiteral(@"ength == 0) {
            // No product added to edit list
            $(""<li class=\""list-group-item\""> No se ha añadido ningún producto </li>"").appendTo(EditProducts);
        } else {
            // Add products to edit list
            for (var i = 0; i < EditProductsList.length; i++) {
                $(
                    ""<li id=\""EditProduct"" + i + ""\""class=\""p-2 list-group-item\"">"" +
                    ""<div class=\""d-flex justify-content-between\"">"" +
                    ""<p class=\""col-4 my-auto\"">"" + EditProductsList[i].ProductName + ""</p>"" +
                    ""<p class=\""col-2 my-auto\"">"" + EditProductsList[i].ProductStock + ""</p>"" +
                    ""<input "" +
                    ""id =\""ProductStock"" + i + ""\"""" +
                    ""class=\""col-3 form-control\"""" +
                    ""type=\""number\"""" +
                    ""min=\""0\"""" +
                    ""value=\""0\"""" +
                    ""placeholder=\""Inventario\"">"" +
                    ""<button type=\""button\"" o");
            WriteLiteral(@"nclick=\""RemoveProductFromEditInventory("" + i + "")\"" class=\""btn btn-sm btn-outline-danger\""> x </button>"" +
                    ""</div > "" +
                    ""</li>""
                ).appendTo(EditProducts);
            }
        }
    }

    // Check if Edit Products List contains a certain product
    function EditProductsContains(SearchProduct) {
        // Loop throught the List
        for (var i = 0; i < EditProductsList.length; i++) {
            if (EditProductsList[i].Id == SearchProduct.Id) {
                return true;
            }
        }

        return false;
    }

    function SearchApproved() {

        // Deny search
        SearchApprovedBool = false;

        setTimeout(function () {

            // Delay next search for 1/10 second
            SearchApprovedBool = true;
        }, 100);
    }

</script>");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<Pages_Inventory_InventoryMain> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<Pages_Inventory_InventoryMain> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<Pages_Inventory_InventoryMain>)PageContext?.ViewData;
        public Pages_Inventory_InventoryMain Model => ViewData.Model;
    }
}
#pragma warning restore 1591
