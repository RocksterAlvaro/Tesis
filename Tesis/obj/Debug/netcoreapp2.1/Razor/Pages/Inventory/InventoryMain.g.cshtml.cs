#pragma checksum "C:\Users\Rockster_Laptop\Desktop\Tesis\Tesis\Pages\Inventory\InventoryMain.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "c063bbd0cd8d92b9a4505ea036b415296fa507c7"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(Tesis.Pages.Inventory.Pages_Inventory_InventoryMain), @"mvc.1.0.razor-page", @"/Pages/Inventory/InventoryMain.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.RazorPageAttribute(@"/Pages/Inventory/InventoryMain.cshtml", typeof(Tesis.Pages.Inventory.Pages_Inventory_InventoryMain), null)]
namespace Tesis.Pages.Inventory
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\Rockster_Laptop\Desktop\Tesis\Tesis\Pages\_ViewImports.cshtml"
using Tesis;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"c063bbd0cd8d92b9a4505ea036b415296fa507c7", @"/Pages/Inventory/InventoryMain.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"c9b8230867da10110ca3d56b2c2fbb3a8e440d01", @"/Pages/_ViewImports.cshtml")]
    public class Pages_Inventory_InventoryMain : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 2 "C:\Users\Rockster_Laptop\Desktop\Tesis\Tesis\Pages\Inventory\InventoryMain.cshtml"
  
    ViewData["Title"] = "Inventory";

#line default
#line hidden
            BeginContext(52, 6315, true);
            WriteLiteral(@"

<div class=""container"">
    <h1>Movimiento de inventario</h1>

    <br />

    <div class=""form-row"">

        <div class=""form-group col-md-5"">
            <input id=""SearchBar"" oninput=""SearchProduct(this.value)"" class=""form-control mr-sm-2 "" type=""search"" placeholder=""Buscar"" aria-label=""Search"">
        </div>

        <div class=""form-group col-md-1"">
            <button class=""btn btn-success my-2 my-sm-0"" type=""submit"">Buscar</button>
        </div>

        <div class=""form-group col-md-2 offset-4"">
            <button class=""btn btn-danger my-2 my-sm-0"">Inventario en 0</button>
        </div>

    </div>

    <div class=""form-row"">

        <div class=""form-group col-md-6"">
            <h4>Lista de productos</h4>
            <ul id=""SearchProducts"" class=""list-group"">
                <li class=""list-group-item"">Nep's pudding</li>
                <li class=""list-group-item"">Tsundere cake</li>
            </ul>
        </div>
        <div class=""form-group col-md-6"">
");
            WriteLiteral(@"            <h4>Productos en movimiento</h4>
            <ul id=""EditProducts"" class=""list-group"">
                <li class=""list-group-item""> No se ha añadido ningún producto </li>
            </ul>
        </div>
    </div>

    <button type=""button"" class=""btn btn-primary pull-right"">Guardar Cambios</button>
    <br />
</div>

<script>

    // Global variables
    var SearchApprovedBool = true;
    var SearchProductsList = [];
    var EditProductsList = [];

    function SearchProduct(SearchWord) {

        // If search is approved by time
        if (SearchApprovedBool) {

            // Clear Search Products List
            $(SearchProducts).empty();

            if (SearchWord.length > 0) {
                // Make the AJAX request
                $.ajax({
                    type: ""GET"",
                    url: ""/Products/SearchProduct"",
                    dataType: ""json"",
                    data: {
                        SearchString: SearchWord
                ");
            WriteLiteral(@"    },
                    contentType: 'application/json; charset=utf-8',
                    // If the request is successfull
                    success: function (response) {

                        // Set the products to the global variable
                        SearchProductsList = Array.from(response);
                        //console.log(""Search: "", SearchProductsList);
                        //console.log(""Edit: "", EditProductsList)

                        // Update Lists HTML
                        UpdateLists();

                        // Check if any product was found
                        if (SearchProductsList.length == 0) {
                            // No product returned by the server
                            $(""<li class=\""list-group-item\""> Ningun producto coincide con la busqueda </li>"").appendTo(SearchProducts);
                        }
                    }
                });
            } else {
                // Show the user haven't search anythin");
            WriteLiteral(@"g
                $(""<li class=\""list-group-item\""> Ninguna busqueda realizada </li>"").appendTo(SearchProducts);
            }

            // Deny search
            SearchApproved();
        }
    }

    function AddProductToEditInventory(ProductIndex) {

        // Add the product to the list of editing products
        EditProductsList.push(SearchProductsList[ProductIndex]);

        // Remove the product from the list of searched products
        SearchProductsList.splice(ProductIndex, 1);

        // Update search
        SearchProduct($(SearchBar).val());
    }

    function RemoveProductFromEditInventory(ProductIndex) {
        // Remove the product from the list of editing products
        EditProductsList.splice(ProductIndex, 1);

        // Clear the list of products searched
        $(EditProducts).empty();

        // Update Lists
        UpdateLists();
    }

    // Update Lists
    function UpdateLists() {
        // Clear Search Products List
        $(Search");
            WriteLiteral(@"Products).empty();

        // Fill the list with the products returned by the server
        for (var i = 0; i < SearchProductsList.length; i++) {
            // If the Product is not being edit yet
            if (!EditProductsContains(SearchProductsList[i])) {
                //console.log(""2"");
                $(""<li id=\""SearchProduct"" + i + ""\"" class=\""list-group-item\"">"" +
                    "" <div class=\""d-flex justify-content-between\"">"" +
                    ""<p class=\""my-auto\"">"" + SearchProductsList[i].productName + ""</p>"" +
                    ""<button type=\""button\"" onclick=\""AddProductToEditInventory("" + i + "")\"" class=\""btn btn-sm btn-outline-success\""> > </button>"" +
                    ""</div > "" +
                    ""</li>"").appendTo(SearchProducts);
            }
        }

        // Clear Edit Products List HTML
        $(EditProducts).empty();

        // Update Edit Products List
        for (var i = 0; i < EditProductsList.length; i++) {
            $(""<li id");
            WriteLiteral(@"=\""EditProduct"" + i + ""\""class=\""list-group-item\"">"" +
                "" <div class=\""d-flex justify-content-between\"">"" +
                ""<p class=\""my-auto\"">"" + EditProductsList[i].productName + ""</p>"" +
                ""<button type=\""button\"" onclick=\""RemoveProductFromEditInventory("" + i + "")\"" class=\""btn btn-sm btn-outline-danger\""> x </button>"" +
                ""</div > "" +
                ""</li>"").appendTo(EditProducts);
        }
    }

    // Check if EditProductsList contains a certain product
    function EditProductsContains(SearchProduct) {
        for (var i = 0; i < EditProductsList.length; i++) {
            //console.log(""SearchProduct"", SearchProduct);
            //console.log(""EditProductsList"", EditProductsList[i]);
            if (EditProductsList[i].id == SearchProduct.id) {
                return true;
            }
        }

        return false;
    }

    function SearchApproved() {

        // Deny search
        SearchApprovedBool = false;

       ");
            WriteLiteral(" setTimeout(function () {\r\n            \r\n            // Delay next search for 1/10 second\r\n            SearchApprovedBool = true;\r\n        }, 100);\r\n    }\r\n    \r\n</script>");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<Pages_Inventory_InventoryMain> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<Pages_Inventory_InventoryMain> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<Pages_Inventory_InventoryMain>)PageContext?.ViewData;
        public Pages_Inventory_InventoryMain Model => ViewData.Model;
    }
}
#pragma warning restore 1591
